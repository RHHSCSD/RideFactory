/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GameStarter;

import apphelper.Const;
import apphelper.Sprite;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

/**
 *
 * @author michael.roy-diclemen
 */
public class GamePanel extends javax.swing.JPanel implements MouseListener{

    GameModel gm;
    Timer animTimer;
    Sprite s1;
    //variables to control your animation elements
//    int x = 0;
//    int y = 10;
//    int xdir = 5;
    boolean running = false;
  
    
    /**
     * Creates new form GamePanel
     */
    public GamePanel(GameModel g) {
        initComponents();
        setPreferredSize(new Dimension(Const.WIDTH,Const.HEIGHT));
        this.setFocusable(true);
        
        //load Images
        s1 = new Sprite(200,200,"images/yourimage.jpg",400,400);
        //s1.rotate(45);
    //     img1 = Toolkit.getDefaultToolkit().getImage("yourimage.jpg");
     //   img1 = img1.getScaledInstance(400, 400, Image.SCALE_DEFAULT);
        // tell the program we want to listen to the mouse
        addMouseListener(this);
        //set up game Model
        gm = g;
        //create and start a Timer for animation
        animTimer = new Timer(10, new AnimTimerTick());
        animTimer.start();
        
        //these lines map a physical key, to a name(string), and then a name(string) to an 'action'.  You will change the key, name and action to suit your needs
        this.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "leftKey");
        this.getActionMap().put("leftKey",new Move("LEFT"));
        
        this.getInputMap().put(KeyStroke.getKeyStroke("W"), "wKey");
        this.getActionMap().put("wKey",new Move("w"));
        
        this.getInputMap().put(KeyStroke.getKeyStroke("D"), "dKey");
        this.getActionMap().put("dKey",new Move("d"));
        
         this.getInputMap().put(KeyStroke.getKeyStroke("X"), "xKey");
        this.getActionMap().put("xKey",new Move("x"));       
    }
public void paintComponent(Graphics g){
    super.paintComponent(g);
    s1.draw(g);
    g.drawLine(0, 0, 300, 300);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });

        jLabel1.setText("Press X to End Game");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(jLabel1)
                .addContainerGap(329, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jLabel1)
                .addContainerGap(381, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        running = true;
    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        running = false;
    }//GEN-LAST:event_formFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables


    /**
     * This event captures a click which is defined as pressing and releasing in the same area
     * @param me 
     */
    public void mouseClicked(MouseEvent me) {
        System.out.println("Click: " + me.getX() + ":" + me.getY() );
        s1.moveOneStepY();
        repaint();
    }

    /**
     * When the mountain is pressed
     * @param me 
     */
    public void mousePressed(MouseEvent me) {
        System.out.println("Press: " + me.getX() + ":" + me.getY() );
    }
/**
 * When the mouse button is released
 * @param me 
 */
    public void mouseReleased(MouseEvent me) {
        System.out.println("Release: " + me.getX() + ":" + me.getY() );
    }
/**
 * When the mouse enters the area
 * @param me 
 */
    public void mouseEntered(MouseEvent me) {
        System.out.println("Enter: " + me.getX() + ":" + me.getY() );
    }
/**
 * When the mouse exits the panel
 * @param me 
 */
    public void mouseExited(MouseEvent me) {
 System.out.println("Exit: " + me.getX() + ":" + me.getY() );
    }

    /**
     * Everything inside here happens when you click on a captured key.
     */
    private class Move extends AbstractAction {
        //this variable holds information for the key
        String key;
        
        public Move(String akey) {
            key = akey;
        }

        public void actionPerformed(ActionEvent ae) {
         // here you decide what you want to happen if a particular key is pressed
            System.out.println("Key: "+key);
            if (key.equals("d") && !s1.crossingRight(getWidth()))
                s1.moveOneStepX();
        
        else if (key.equals("x")){
            CardLayout cl = (CardLayout)gm.mainPanel.getLayout();
            cl.show(gm.mainPanel,"end");
        }
        
        }
    
    }

    /**
     * Everything inside this actionPerformed will happen every time the animation
     * timer clicks.
     */
    private  class AnimTimerTick implements ActionListener {


        public void actionPerformed(ActionEvent ae) {
          if (running){
            //the stuff we want to change every clock tick
          //  if (x >= 300 || x <=0)
            //    xdir = -xdir;
                
                
         //   x = x + xdir;
           // y = y + 1;
            s1.rotate(5);
            repaint();
          }
        }
    }
}
